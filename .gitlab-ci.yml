variables:
    TZ: "America/New_York"
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    APT_CACHE_DIR: "$CI_PROJECT_DIR/apt-cache"
    POSTGRES_DB: custom_db
    POSTGRES_USER: custom_user
    POSTGRES_PASSWORD: custom_pass
    FARADAY_USER: custom_user
    FARADAY_PASSWORD: custom_pass
    FARADAY_EMAIL: test@test.com
    FARADAY_URL: http://localhost:5985/
    DEFAULT_FARADAY_REF: white/dev
   # faraday devsecops
   # VAULT_ROLE: 'python-sast-readonly'
   # VAULT_ADDR: 'https://tluav-lb.faradaysec.com'
   # VAULT_SECRET_PATH: 'gitlab/SAST'    
    VAULT_SERVER_URL: https://tluav-lb.faradaysec.com
    VAULT_AUTH_ROLE: python-sast-readonly
    VAULT_AUTH_PATH: jwt

include:
  - local: .gitlab/get-secret.yaml
# include:
#   - local: .gitlab/ci/fetch-secrets.yml

# workflow:
#   rules:
#     - if: $CI_MERGE_REQUEST_ID
#       when: never
#     - when: always

# cache:
#   paths:
#     - "$CI_PROJECT_DIR/.cache/pip"
#     - "$CI_PROJECT_DIR/apt-cache"


# before_script:
#     - mkdir -pv $APT_CACHE_DIR

stages:
    - SAST
    - deploy




deploy:
    stage: deploy
    environment: dev
    # Pull docker image
    image: python:3.8-bullseye
    # Setup AWS CLI to have proper credential keys
    before_script:
        - mkdir ~/.aws/
        - touch ~/.aws/credentials
        - apt-get update
        - apt-get install software-properties-common -y
        - curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
        - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        - apt-get update && apt-get install vault -y
        - setcap cap_ipc_lock= /usr/bin/vault
        #- export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=$VAULT_ROLE jwt=$CI_JOB_JWT)"
        #- if [ -z "$AWS_ACCESS_KEY_ID" ]; then export AWS_ACCESS_KEY_ID="$(vault kv get -field=AWS_ACCESS_KEY_ID secrets/gitlab/gorrabot-aws)"; fi; if [ -z "$AWS_ACCESS_KEY_ID" ]; then exit 1; fi
        #- if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then export AWS_SECRET_ACCESS_KEY="$(vault kv get -field=AWS_SECRET_ACCESS_KEY secrets/gitlab/gorrabot-aws)"; fi; if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then exit 1; fi
        - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "cat $AWS_ACCESS_KEY_ID" "cat $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        - pip install awsebcli
    # Run deployment using EB CLI deploy on master branch
    script:
        - eb deploy gorrabot-dev
    # Ensure to run deployment only on master branch
    rules:
      - if: $CI_COMMIT_REF_NAME == "master"
        when: on_success
    tags:
        - faradaytests

bandit:
  stage: SAST
  image: python:3
  tags:
    - faradaytests
  script:
    - pip3 install bandit
    - mkdir /results
    - "bandit -r ${CI_PROJECT_DIR} -o /results/output.xml -f xml"
  after_script:
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
    - apt update
    - apt-get install software-properties-common -y
    - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com focal main"
    - apt update
    - pip3 install faraday-cli
    # if [[ $(grep -c testcase /results/output.xml) -gt 0 ]]; then (faraday-cli auth -f $FARADAY_URL -u $FARADAY_USER -p $FARADAY_PASSWORD && faraday-cli tool report /results/output.xml -w $DEVSECOPS_WORKSPACE --vuln-tag "$CI_PROJECT_NAME" --tag-vuln "$CI_COMMIT_REF_NAME"); else (echo 'no vulns dettected' && exit 0); fi
    - if [[ $(grep -c testcase /results/output.xml) -gt 0 ]]; then (faraday-cli auth -f $FARADAY_URL -u $FARADAY_USER -p $FARADAY_PASSWORD && faraday-cli tool report /results/output.xml -w $DEVSECOPS_WORKSPACE --tag-vuln $CI_PROJECT_NAME,$CI_COMMIT_REF_NAME); else (echo 'no vulns dettected' && exit 0); fi    
    # - apt install vault -y
    # - setcap cap_ipc_lock= /usr/bin/vault
    #- !reference [ .get_secrets ]
  rules:
    - when: on_success